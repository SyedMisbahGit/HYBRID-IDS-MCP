# Logstash Pipeline for NIDS Alerts
# Processes signature-based detection alerts from the C++ NIDS engine

input {
  # Read NIDS alerts from JSON log file
  file {
    path => "/var/log/hybrid-ids/nids_alerts.log"
    start_position => "beginning"
    sincedb_path => "/dev/null"
    codec => "json"
    type => "nids_alert"
    tags => ["nids", "signature", "security"]
  }

  # TCP input for real-time alerts (optional)
  tcp {
    port => 5000
    codec => "json"
    type => "nids_alert"
    tags => ["nids", "signature", "realtime"]
  }
}

filter {
  if [type] == "nids_alert" {
    # Parse timestamp
    date {
      match => [ "timestamp", "yyyy-MM-dd HH:mm:ss", "ISO8601" ]
      target => "@timestamp"
    }

    # Extract source/destination IPs and ports
    if [src_ip] {
      mutate {
        add_field => { "source.ip" => "%{src_ip}" }
        add_field => { "source.port" => "%{src_port}" }
        add_field => { "destination.ip" => "%{dst_ip}" }
        add_field => { "destination.port" => "%{dst_port}" }
      }

      # GeoIP lookup for source IP
      geoip {
        source => "src_ip"
        target => "source.geo"
      }

      # GeoIP lookup for destination IP
      geoip {
        source => "dst_ip"
        target => "destination.geo"
      }
    }

    # Severity to numeric (for aggregations)
    if [severity] == "CRITICAL" {
      mutate { add_field => { "severity_level" => 4 } }
    } else if [severity] == "HIGH" {
      mutate { add_field => { "severity_level" => 3 } }
    } else if [severity] == "MEDIUM" {
      mutate { add_field => { "severity_level" => 2 } }
    } else if [severity] == "LOW" {
      mutate { add_field => { "severity_level" => 1 } }
    }

    # Protocol mapping
    mutate {
      add_field => { "network.protocol" => "%{protocol}" }
      add_field => { "event.kind" => "alert" }
      add_field => { "event.category" => "intrusion_detection" }
      add_field => { "event.type" => "indicator" }
      add_field => { "event.dataset" => "hybrid_ids.nids" }
    }

    # Add attack categorization based on rule_id
    if [rule_id] == 1001 {
      mutate { add_field => { "threat.technique.name" => "SSH Scan" } }
      mutate { add_field => { "threat.tactic.name" => "Reconnaissance" } }
    } else if [rule_id] == 1002 {
      mutate { add_field => { "threat.technique.name" => "SQL Injection" } }
      mutate { add_field => { "threat.tactic.name" => "Initial Access" } }
    } else if [rule_id] == 1003 {
      mutate { add_field => { "threat.technique.name" => "Port Scan" } }
      mutate { add_field => { "threat.tactic.name" => "Reconnaissance" } }
    } else if [rule_id] == 1006 {
      mutate { add_field => { "threat.technique.name" => "Telnet Connection" } }
      mutate { add_field => { "threat.tactic.name" => "Initial Access" } }
    }
  }
}

output {
  if [type] == "nids_alert" {
    # Send to Elasticsearch
    elasticsearch {
      hosts => ["elasticsearch:9200"]
      index => "hybrid-ids-nids-alerts-%{+YYYY.MM.dd}"
      document_type => "_doc"
    }

    # Debug output (optional, disable in production)
    # stdout { codec => rubydebug }
  }
}
