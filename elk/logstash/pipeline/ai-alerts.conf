# Logstash Pipeline for AI Anomaly Alerts
# Processes ML-based anomaly detection alerts from the Python AI engine

input {
  # Read AI alerts from JSON log file
  file {
    path => "/var/log/hybrid-ids/ai_alerts.log"
    start_position => "beginning"
    sincedb_path => "/dev/null"
    codec => "json"
    type => "ai_alert"
    tags => ["ai", "anomaly", "ml"]
  }
}

filter {
  if [type] == "ai_alert" {
    # Parse timestamp
    date {
      match => [ "timestamp", "yyyy-MM-dd HH:mm:ss", "ISO8601" ]
      target => "@timestamp"
    }

    # Extract confidence and details
    if [confidence] {
      mutate {
        convert => { "confidence" => "float" }
        add_field => { "ml.confidence" => "%{confidence}" }
      }
    }

    # Extract model predictions
    if [details][model_predictions] {
      ruby {
        code => "
          predictions = event.get('[details][model_predictions]')
          if predictions.is_a?(Hash)
            predictions.each do |model, score|
              event.set('[ml][models][' + model + ']', score)
            end
          end
        "
      }
    }

    # Calculate threat score based on confidence
    if [confidence] {
      ruby {
        code => "
          conf = event.get('confidence').to_f
          if conf >= 0.9
            event.set('threat.score', 10)
            event.set('risk_level', 'critical')
          elsif conf >= 0.8
            event.set('threat.score', 8)
            event.set('risk_level', 'high')
          elsif conf >= 0.7
            event.set('threat.score', 6)
            event.set('risk_level', 'medium')
          else
            event.set('threat.score', 4)
            event.set('risk_level', 'low')
          end
        "
      }
    }

    # Add inference performance metrics
    if [details][inference_time_ms] {
      mutate {
        convert => { "[details][inference_time_ms]" => "float" }
        add_field => { "performance.inference_ms" => "%{[details][inference_time_ms]}" }
      }
    }

    # Add ensemble score
    if [details][ensemble_score] {
      mutate {
        convert => { "[details][ensemble_score]" => "float" }
        add_field => { "ml.ensemble_score" => "%{[details][ensemble_score]}" }
      }
    }

    # Standard fields
    mutate {
      add_field => { "event.kind" => "alert" }
      add_field => { "event.category" => "anomaly_detection" }
      add_field => { "event.type" => "indicator" }
      add_field => { "event.dataset" => "hybrid_ids.ai" }
      add_field => { "threat.technique.name" => "Anomalous Behavior" }
      add_field => { "threat.tactic.name" => "Unknown" }
    }
  }
}

output {
  if [type] == "ai_alert" {
    # Send to Elasticsearch
    elasticsearch {
      hosts => ["elasticsearch:9200"]
      index => "hybrid-ids-ai-alerts-%{+YYYY.MM.dd}"
      document_type => "_doc"
    }

    # Debug output (optional)
    # stdout { codec => rubydebug }
  }
}
